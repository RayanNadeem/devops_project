pipeline {
    agent any
    environment {
        DOCKER_IMAGE1 = 'rayan651/frontend:latest'
        DOCKER_IMAGE2 = 'rayan651/backend:latest'
        DOCKER_REGISTRY = 'docker.io'
        KUBECONFIG = """C:\\Users\\Administrator\\.kube\\config"""
    }
    stages {
        stage('Clean Workspace') {
            steps {
                script {
                    deleteDir() // Clean the workspace
                }
            }
        }
        stage('Checkout') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dev-project',
                                                  usernameVariable: 'username',
                                                  passwordVariable: 'password')]) {
                    // Increase buffer size and clone the GitHub repository using credentials
                    bat script: '''
                        git config --global http.postBuffer 524288000
                        git config --global http.version HTTP/1.1
                        git clone https://%username%:%password%@github.com/RayanNadeem/devops_project
                    '''
                }
            }
        }
        stage('List Files') {
            steps {
                bat 'dir'  // List the files in the workspace
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    try {
                        dir('devops_project/front-end') {
                            echo "Building Docker image: ${DOCKER_IMAGE1}"
                            bat "docker build -t ${DOCKER_IMAGE1} ."
                        }
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Failed to build Docker image: ${DOCKER_IMAGE1}"
                    }
                }

                script {
                    try {
                        dir('devops_project/backend') {
                            echo "Building Docker image: ${DOCKER_IMAGE2}"
                            bat "docker build -t ${DOCKER_IMAGE2} ."
                        }
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error "Failed to build Docker image: ${DOCKER_IMAGE2}"
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-credentials',
                                                  usernameVariable: 'DOCKER_USERNAME',
                                                  passwordVariable: 'DOCKER_PASSWORD')]) {
                    script {
                        echo "Logging in to Docker registry: ${DOCKER_REGISTRY} with user: ${DOCKER_USERNAME}"

                        bat """
                            docker login ${DOCKER_REGISTRY} -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
                        """
                        parallel(
                            "Push Frontend Image": {
                                echo "Pushing Docker image: ${DOCKER_IMAGE1}"
                                bat "docker push ${DOCKER_IMAGE1}"
                            },
                            "Push Backend Image": {
                                echo "Pushing Docker image: ${DOCKER_IMAGE2}"
                                bat "docker push ${DOCKER_IMAGE2}"
                            }
                        )
                    }
                }
            }
        }
        stage('Debug Docker Image Push') {
            steps {
                script {
                    echo "Checking Docker registry for the pushed image:"
                    bat "docker pull ${DOCKER_IMAGE1}"
                }
            }
        }
        stage('Run Docker Container') {
            steps {
                script {
                    echo "Running Docker container from image: ${DOCKER_IMAGE1}"
                    bat(script: "docker run -d -p 3000:3000 ${DOCKER_IMAGE1}", returnStatus: true, wait: true, timeout: 5 * 60)

                    echo "Running Docker container from image: ${DOCKER_IMAGE2}"
                    bat(script: "docker run -d -p 5000:5000 ${DOCKER_IMAGE2}", returnStatus: true, wait: true, timeout: 5 * 60)
                }
            }
        }
        stage('Debug Docker Container') {
            steps {
                script {
                    echo "Listing running Docker containers:"
                    bat 'docker ps'
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    dir('devops_project') {
                        try {
                            echo "Applying Kubernetes manifests..."
                            bat 'kubectl apply -f deployment.yaml'
                            bat 'kubectl apply -f service.yaml'
                        } catch (Exception e) {
                            currentBuild.result = 'FAILURE'
                            error "Failed to deploy to Kubernetes: ${e.getMessage()}"
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline completed.'
        }
        success {
            echo 'Pipeline succeeded!'
            script {
                slackSend(
                    channel: '#aqr-ecommerce-store',
                    message: "Pipeline succeeded! The Docker images ${DOCKER_IMAGE1} and ${DOCKER_IMAGE2} were built and pushed successfully. Check the details here: ${env.BUILD_URL}"
                )
            }
        }
        failure {
            echo 'Pipeline failed.'
            script {
                slackSend(
                    channel: '#aqr-ecommerce-store',
                    message: "Pipeline failed! Please check the Jenkins logs for details. Check the build here: ${env.BUILD_URL}"
                )
            }
        }
    }
}
