pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'fqabdullah/ecommerce-frontend:latest'
        DOCKER_REGISTRY = 'docker.io'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                deleteDir()
            }
        }
        stage('Checkout Code') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-credentials', 
                                                  usernameVariable: 'GITHUB_USERNAME', 
                                                  passwordVariable: 'GITHUB_PASSWORD')]) {
                    bat 'git clone https://${GITHUB_USERNAME}:${GITHUB_PASSWORD}@github.com/RayanNadeem/devops_project.git'
                }
            }
        }
        stage('List Files') {
            steps {
                bat 'ls -la'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    dir('devops_project') {  // Adjust the directory to match the cloned repo
                        bat 'docker-compose build frontend'
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-credentials', 
                                                  usernameVariable: 'DOCKER_USERNAME', 
                                                  passwordVariable: 'DOCKER_PASSWORD')]) {
                    script {
                        bat """
                            echo ${DOCKER_PASSWORD} | docker login ${DOCKER_REGISTRY} -u ${DOCKER_USERNAME} --password-stdin
                            docker tag devops_project_frontend ${DOCKER_IMAGE}
                            docker push ${DOCKER_IMAGE}
                        """
                    }
                }
            }
        }
        stage('Run Docker Container') {
            steps {
                script {
                    bat 'docker run -d -p 3000:3000 ${DOCKER_IMAGE}'
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline completed.'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
